// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clients   Client[]
  flows     Flow[]
  shares    Share[]
  logs      AuditLog[]

  @@map("users")
}

model Client {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  company     String?
  description String?
  status      ClientStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  flows  Flow[]

  @@map("clients")
}

model Flow {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      FlowStatus @default(DRAFT)
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId String?
  client   Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
  versions FlowVersion[]
  shares   Share[]

  @@map("flows")
}

model FlowVersion {
  id        String   @id @default(cuid())
  version   Int
  data      Json     // Flow diagram data
  createdAt DateTime @default(now())

  // Relations
  flowId String
  flow   Flow   @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@unique([flowId, version])
  @@map("flow_versions")
}

model Share {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  flowId String
  flow   Flow   @relation(fields: [flowId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("shares")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  resource  String
  resourceId String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

enum Role {
  ADMIN
  CLIENT
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum FlowStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
