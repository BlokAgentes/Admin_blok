#!/usr/bin/env node

/**
 * Supabase Configuration Helper
 * 
 * This script helps you configure your environment variables for Supabase
 * and validates the connection before running the schema setup.
 */

import { createClient } from '@supabase/supabase-js';
import readline from 'readline';
import fs from 'fs';

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(query) {
    return new Promise(resolve => rl.question(query, resolve));
}

async function configureSupabase() {
    console.log('üîß Supabase Configuration Helper for Blok Platform\n');
    
    const config = {
        url: 'https://eslcwpuxyqopwylgzddz.supabase.co',
        projectRef: 'eslcwpuxyqopwylgzddz'
    };

    console.log(`üìç Project URL: ${config.url}`);
    console.log(`üè∑Ô∏è  Project Ref: ${config.projectRef}\n`);

    // Get API keys
    console.log('üîë Please provide your Supabase API keys:');
    console.log('   Find these in your Supabase dashboard ‚Üí Settings ‚Üí API\n');

    const anonKey = await question('üìã Anon Key (public): ');
    const serviceKey = await question('üîê Service Role Key (secret): ');

    if (!anonKey || !serviceKey) {
        console.error('‚ùå Both API keys are required');
        rl.close();
        return;
    }

    // Test connection
    console.log('\nüß™ Testing connection...');

    try {
        const client = createClient(config.url, serviceKey, {
            auth: { autoRefreshToken: false, persistSession: false }
        });

        const { data, error } = await client
            .from('information_schema.tables')
            .select('table_name')
            .limit(1);

        if (error) {
            console.error('‚ùå Connection test failed:', error.message);
            console.log('üí° Please check your API keys and project URL');
            rl.close();
            return;
        }

        console.log('‚úÖ Connection test successful!');

    } catch (err) {
        console.error('‚ùå Connection error:', err.message);
        rl.close();
        return;
    }

    // Generate environment variables
    console.log('\nüìù Generating environment configuration...\n');

    const envContent = `
# Supabase Configuration (Generated by configure-supabase.js)
SUPABASE_URL="${config.url}"
SUPABASE_ANON_KEY="${anonKey}"
SUPABASE_SERVICE_ROLE_KEY="${serviceKey}"

# Frontend Environment Variables (add to apps/frontend/.env.local)
NEXT_PUBLIC_SUPABASE_URL="${config.url}"
NEXT_PUBLIC_SUPABASE_ANON_KEY="${anonKey}"

# Updated DATABASE_URL for Supabase (replace with your actual password)
# DATABASE_URL="postgresql://postgres:[your-password]@db.${config.projectRef}.supabase.co:5432/postgres"
`;

    console.log('üìÑ Environment variables to add to your .env file:');
    console.log('‚îÄ'.repeat(60));
    console.log(envContent.trim());
    console.log('‚îÄ'.repeat(60));

    const shouldSave = await question('\nüíæ Save these to .env file? (y/N): ');
    
    if (shouldSave.toLowerCase() === 'y' || shouldSave.toLowerCase() === 'yes') {
        try {
            // Read existing .env if it exists
            let existingEnv = '';
            try {
                existingEnv = fs.readFileSync('.env', 'utf8');
            } catch (err) {
                // File doesn't exist, that's OK
            }

            // Remove any existing Supabase configuration
            const cleanedEnv = existingEnv
                .split('\n')
                .filter(line => !line.startsWith('SUPABASE_') && !line.startsWith('NEXT_PUBLIC_SUPABASE_'))
                .join('\n');

            // Append new configuration
            const finalEnv = cleanedEnv.trim() + '\n\n' + envContent.trim() + '\n';

            fs.writeFileSync('.env', finalEnv);
            console.log('‚úÖ Environment variables saved to .env file');

            // Also create frontend-specific .env.local
            const frontendEnv = `
# Frontend Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL="${config.url}"
NEXT_PUBLIC_SUPABASE_ANON_KEY="${anonKey}"
`;

            fs.writeFileSync('apps/frontend/.env.local', frontendEnv.trim() + '\n');
            console.log('‚úÖ Frontend environment variables saved to apps/frontend/.env.local');

        } catch (err) {
            console.error('‚ùå Error saving environment file:', err.message);
        }
    }

    console.log('\nüöÄ Next steps:');
    console.log('1. Run: node setup-supabase-schema.js');
    console.log('2. Run: node validate-supabase-schema.js');
    console.log('3. Update your frontend to use Supabase client');
    console.log('4. Test your application with the new database');

    rl.close();
}

configureSupabase().catch(console.error);