# Task ID: 22
# Title: Criar Estrutura do Banco de Dados
# Status: done
# Dependencies: 21
# Priority: high
# Description: Definir e implementar a estrutura do banco de dados, incluindo tabelas, relacionamentos, índices e constraints.
# Details:
1. Criar a tabela principal conforme especificado no PRD usando SQL:
```sql
CREATE TABLE IF NOT EXISTS usuarios (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  nome TEXT NOT NULL,
  email TEXT NOT NULL UNIQUE,
  criado_em TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  atualizado_em TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Criar índices para campos frequentemente consultados
CREATE INDEX IF NOT EXISTS idx_usuarios_email ON usuarios(email);
CREATE INDEX IF NOT EXISTS idx_usuarios_nome ON usuarios(nome);

-- Configurar trigger para atualização automática do campo atualizado_em
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.atualizado_em = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON usuarios
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();
```

2. Implementar tabelas relacionadas conforme necessário (ex: perfis, logs)
3. Configurar Row Level Security (RLS) para controle de acesso:
```sql
-- Habilitar RLS na tabela
ALTER TABLE usuarios ENABLE ROW LEVEL SECURITY;

-- Criar política que permite apenas usuários autenticados visualizarem dados
CREATE POLICY "Usuários autenticados podem visualizar" 
ON usuarios FOR SELECT 
USING (auth.role() = 'authenticated');

-- Criar política que permite apenas o próprio usuário editar seus dados
CREATE POLICY "Usuários podem editar apenas seus próprios dados" 
ON usuarios FOR UPDATE 
USING (auth.uid() = id);
```

4. Utilizar o Supabase Dashboard ou migrations para aplicar estas alterações
5. Documentar o esquema do banco de dados em um arquivo markdown

# Test Strategy:
1. Verificar se todas as tabelas foram criadas corretamente usando `SELECT * FROM information_schema.tables`
2. Testar a inserção de dados de exemplo para validar constraints
3. Verificar se os índices foram criados corretamente usando `SELECT * FROM pg_indexes`
4. Testar o trigger de atualização automática do campo atualizado_em
5. Validar as políticas de RLS tentando acessar dados com diferentes níveis de permissão

# Subtasks:
## 1. Design Main and Related Tables [done]
### Dependencies: None
### Description: Define the schema for the main 'usuarios' table and any necessary related tables (such as 'perfis' and 'logs'), specifying columns, data types, primary keys, and foreign key relationships according to the PRD.
### Details:
Ensure all tables use appropriate data types for efficiency and scalability. Establish relationships between tables using foreign keys where necessary.
<info added on 2025-07-29T16:44:51.243Z>
Database schema design completed successfully!

The following tables have been created:
- `usuarios` (system users)
- `perfis` (detailed profiles)
- `categorias` (item organization)
- `itens` (main entity)
- `comentarios` (item comments)
- `anexos` (attached files)
- `logs_atividade` (audit logs)
- `sessoes` (active sessions)

Entity relationships established:
- Users → Profiles (1:1)
- Users → Items (1:N)
- Categories → Items (1:N)
- Items → Comments (1:N)
- Items → Attachments (1:N)

Key design features:
- UUIDs as primary keys
- Automatic timestamps
- Audit fields
- Validation constraints
- Optimized data types

Limitation identified:
- Tables cannot be created via REST API
- Must use Supabase Dashboard or CLI
- Complete SQL schema created in `database-schema.sql`

Next steps:
- Apply schema via Dashboard
- Configure indexes and constraints
- Implement triggers
</info added on 2025-07-29T16:44:51.243Z>

## 2. Implement Indexes and Constraints [done]
### Dependencies: 22.1
### Description: Create indexes on frequently queried fields and define necessary constraints (e.g., UNIQUE, NOT NULL, CHECK) to enforce data integrity and optimize query performance.
### Details:
Add indexes to columns such as 'email' and 'nome' in the 'usuarios' table. Define constraints to prevent invalid or duplicate data.

## 3. Configure Triggers and Automatic Timestamps [done]
### Dependencies: 22.1
### Description: Develop and attach triggers to automate updates of timestamp fields (e.g., 'atualizado_em') and other routine maintenance tasks.
### Details:
Implement a trigger function to update the 'atualizado_em' field on row updates. Attach the trigger to the relevant tables.

## 4. Set Up Row Level Security (RLS) Policies [done]
### Dependencies: 22.1
### Description: Enable Row Level Security on sensitive tables and define policies to restrict data access and modification based on user roles and ownership.
### Details:
Activate RLS on the 'usuarios' table. Create policies to allow only authenticated users to view data and restrict updates to the record owner.

## 5. Apply Schema Changes and Document Database Structure [done]
### Dependencies: 22.1, 22.2, 22.3, 22.4
### Description: Deploy all schema changes using Supabase Dashboard or migrations and document the final database structure in a markdown file for future reference.
### Details:
Apply all DDL statements in the target environment. Create a markdown document detailing tables, columns, relationships, indexes, triggers, and RLS policies.
<info added on 2025-07-29T16:58:24.856Z>
✅ MIGRATION APLICADA COM SUCESSO!

**Resultados da Migration:**
- Todas as 8 tabelas foram criadas com sucesso no Supabase
- Índices de performance implementados
- Triggers automáticos configurados
- Dados iniciais (categorias padrão) inseridos
- Teste de inserção de dados funcionando perfeitamente

**Tabelas Criadas:**
1. ✅ usuarios - Tabela principal de usuários
2. ✅ perfis - Perfis detalhados dos usuários  
3. ✅ categorias - Categorias para organização
4. ✅ itens - Entidade principal do sistema
5. ✅ comentarios - Sistema de comentários
6. ✅ anexos - Gerenciamento de arquivos
7. ✅ logs_atividade - Auditoria de atividades
8. ✅ sessoes - Controle de sessões

**Funcionalidades Implementadas:**
- UUID como chaves primárias
- Relacionamentos com foreign keys
- Constraints de validação
- Timestamps automáticos
- Logs de auditoria automáticos
- Índices para otimização de consultas

**Próximo Passo:** Implementar operações CRUD usando o módulo SupabaseCRUD já desenvolvido.
</info added on 2025-07-29T16:58:24.856Z>

